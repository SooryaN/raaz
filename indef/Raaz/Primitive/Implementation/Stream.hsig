{-# LANGUAGE ConstraintKinds             #-}
{-# LANGUAGE DataKinds                   #-}
{-# LANGUAGE KindSignatures              #-}

-- | A stream primitive is a block primitive that can handle byte
-- streams of arbitrary length (not necessarily multiple of block
-- size). What is exposed in this signature is the function to process
-- the last bytes. While processing a data stream, it is expected that
-- one uses the block interface as much as possible and use
-- `processLast` only while processing the last bytes.
signature Raaz.Primitive.Implementation.Stream
          ( Prim
          , name
          , description
          , Internals
          , BufferAlignment
          , BufferPrim
          , additionalBlocks
          , processBlocks
          , processLast
          ) where


import Raaz.Core
import Raaz.Primitive.Implementation.Block


-- | Process the last bytes of the stream.
processLast :: BufferPrim
            -> BYTES Int
            -> MT Internals ()
